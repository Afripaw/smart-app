// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                     String      @id @default(cuid())
    name                   String
    emailVerified          DateTime?
    email                  String?
    image                  String?
    userID                 Int         @default(autoincrement())
    password               String
    surname                String
    mobile                 String      @unique
    addressGreaterArea     greaterArea @relation(fields: [addressGreaterAreaID], references: [greaterAreaID])
    addressGreaterAreaID   Int
    addressArea            area?       @relation(fields: [addressAreaID], references: [areaID])
    addressAreaID          Int?
    addressStreet          street?     @relation(fields: [addressStreetID], references: [streetID])
    addressStreetID        Int?
    addressStreetCode      String?
    addressStreetNumber    String?
    addressSuburb          String?
    addressPostalCode      String?
    addressFreeForm        String?
    preferredCommunication String
    role                   String
    status                 String
    comments               String?
    startingDate           DateTime
    // communication          communication? @relation(fields: [communicationID], references: [communicationID])
    communicationID        Int?
    createdAt              DateTime    @default(now())
    updatedAt              DateTime?   @updatedAt
    accounts               Account[]
    sessions               Session[]
    posts                  Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model petOwner {
    ownerID                Int         @id @default(autoincrement())
    firstName              String
    surname                String
    image                  String?
    email                  String?
    mobile                 String?
    addressGreaterArea     greaterArea @relation(fields: [addressGreaterAreaID], references: [greaterAreaID])
    addressGreaterAreaID   Int
    addressArea            area        @relation(fields: [addressAreaID], references: [areaID])
    addressAreaID          Int
    addressStreet          street      @relation(fields: [addressStreetID], references: [streetID])
    addressStreetID        Int
    addressStreetCode      String?
    addressStreetNumber    String
    addressFreeForm        String?
    status                 String
    startingDate           DateTime
    preferredCommunication String
    pets                   pet[]
    comments               String?
    // communication          communication? @relation(fields: [communicationID], references: [communicationID])
    communicationID        Int?
    createdAt              DateTime    @default(now())
    updatedAt              DateTime    @updatedAt
}

model pet {
    petID   Int     @id @default(autoincrement())
    petName String
    image   String?

    owner   petOwner @relation(fields: [ownerID], references: [ownerID])
    ownerID Int

    petTreatments petTreatment[]

    species                 String
    sex                     String
    age                     String
    breed                   String
    colour                  String[]
    markings                String?
    status                  String
    sterilisedStatus        DateTime
    sterilisedRequested     DateTime?
    sterilisedRequestSigned String?
    sterilisationOutcome    String?
    vaccinationShot1        DateTime
    vaccinationShot2        DateTime?
    vaccinationShot3        DateTime?
    clinicsAttended         petOnPetClinic[]
    lastDeworming           DateTime?
    membership              String
    cardStatus              String?
    kennelReceived          String[]
    comments                String?
    createdAt               DateTime         @default(now())
    updatedAt               DateTime         @updatedAt
}

model petClinic {
    clinicID      Int                    @id @default(autoincrement())
    pet           petOnPetClinic[]
    volunteer     volunteerOnPetClinic[]
    date          DateTime               @default(now())
    greaterArea   greaterArea            @relation(fields: [greaterAreaID], references: [greaterAreaID])
    greaterAreaID Int
    area          area                   @relation(fields: [areaID], references: [areaID])
    areaID        Int
    conditions    String
    comments      String?
    createdAt     DateTime               @default(now())
    updatedAt     DateTime               @updatedAt
}

//For many to many relationship between pet and petClinic
model petOnPetClinic {
    petOnClinicID Int       @id @default(autoincrement())
    pet           pet       @relation(fields: [petID], references: [petID])
    petID         Int
    clinic        petClinic @relation(fields: [clinicID], references: [clinicID])
    clinicID      Int
}

//For many to many relationship between volunteer and petClinic
model volunteerOnPetClinic {
    volunteerOnClinicID Int       @id @default(autoincrement())
    volunteer           volunteer @relation(fields: [volunteerID], references: [volunteerID])
    volunteerID         Int
    clinic              petClinic @relation(fields: [clinicID], references: [clinicID])
    clinicID            Int
}

model petTreatment {
    treatmentID Int      @id @default(autoincrement())
    date        DateTime

    pet   pet @relation(fields: [petID], references: [petID])
    petID Int

    category  String
    type      String
    comments  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model volunteer {
    volunteerID            Int                      @id @default(autoincrement())
    firstName              String
    surname                String
    image                  String?
    email                  String?
    mobile                 String?                  @unique
    addressGreaterArea     greaterAreaOnVolunteer[]
    addressStreet          String?
    addressStreetCode      String?
    addressStreetNumber    String?
    addressSuburb          String?
    addressPostalCode      String?
    addressFreeForm        String?
    preferredCommunication String
    role                   String[]
    collaboratorOrg        String?
    status                 String
    clinicsAttended        volunteerOnPetClinic[]
    comments               String
    startingDate           DateTime
    communicationID        Int?
    createdAt              DateTime                 @default(now())
    updatedAt              DateTime                 @updatedAt
}

model greaterArea {
    greaterAreaID Int                          @id @default(autoincrement())
    greaterArea   String
    area          area[]
    volunteer     greaterAreaOnVolunteer[]
    user          User[]
    petOwner      petOwner[]
    petClinic     petClinic[]
    communication greaterAreaOnCommunication[]
    createdAt     DateTime                     @default(now())
    updatedAt     DateTime                     @updatedAt
}

model greaterAreaOnVolunteer {
    greaterAreaOnVolunteerID Int         @id @default(autoincrement())
    greaterArea              greaterArea @relation(fields: [greaterAreaID], references: [greaterAreaID])
    greaterAreaID            Int
    volunteer                volunteer   @relation(fields: [volunteerID], references: [volunteerID])
    volunteerID              Int
    createdAt                DateTime    @default(now())
    updatedAt                DateTime    @updatedAt
}

model area {
    areaID        Int                   @id @default(autoincrement())
    area          String
    greaterArea   greaterArea           @relation(fields: [greaterAreaID], references: [greaterAreaID])
    greaterAreaID Int
    street        street[]
    user          User[]
    petOwner      petOwner[]
    petClinic     petClinic[]
    communication areaOnCommunication[]
    createdAt     DateTime              @default(now())
    updatedAt     DateTime              @updatedAt
}

// model areaOnStreet {
//     areaOnStreetID Int      @id @default(autoincrement())
//     area           area     @relation(fields: [areaID], references: [areaID])
//     areaID         Int
//     street         street   @relation(fields: [streetID], references: [streetID])
//     streetID       Int
//     createdAt      DateTime @default(now())
//     updatedAt      DateTime @updatedAt
// }

model street {
    streetID  Int        @id @default(autoincrement())
    street    String
    area      area       @relation(fields: [areaID], references: [areaID])
    areaID    Int
    user      User[]
    petOwner  petOwner[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model communication {
    communicationID Int                          @id @default(autoincrement())
    type            String
    message         String
    recipients      String[]
    greaterArea     greaterAreaOnCommunication[]
    area            areaOnCommunication[]
    success         String
    createdAt       DateTime                     @default(now())
    updatedAt       DateTime                     @updatedAt
}

model greaterAreaOnCommunication {
    greaterAreaOnCommunicationID Int           @id @default(autoincrement())
    greaterArea                  greaterArea   @relation(fields: [greaterAreaID], references: [greaterAreaID])
    greaterAreaID                Int
    communication                communication @relation(fields: [communicationID], references: [communicationID])
    communicationID              Int
    createdAt                    DateTime      @default(now())
    updatedAt                    DateTime      @updatedAt
}

model areaOnCommunication {
    areaOnCommunicationID Int           @id @default(autoincrement())
    area                  area          @relation(fields: [areaID], references: [areaID])
    areaID                Int
    communication         communication @relation(fields: [communicationID], references: [communicationID])
    communicationID       Int
    createdAt             DateTime      @default(now())
    updatedAt             DateTime      @updatedAt
}

model identification {
    identificationID Int      @id @default(autoincrement())
    userID           Int
    volunteerID      Int
    petID            Int
    clinicID         Int
    petOwnerID       Int
    communicationID  Int
    treatmentID      Int
    //greaterAreaID    Int
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
}
