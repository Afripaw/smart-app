// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                     String    @id @default(cuid())
    name                   String
    email                  String?   @unique
    emailVerified          DateTime?
    image                  String?
    userID                 Int       @default(autoincrement())
    password               String
    surname                String
    mobile                 String
    addressGreaterArea     String
    addressArea            String?
    addressStreet          String?
    addressStreetCode      String?
    addressStreetNumber    String?
    addressSuburb          String?
    addressPostalCode      String?
    addressFreeForm        String?
    preferredCommunication String
    role                   String
    status                 String
    comments               String?
    startingDate           DateTime
    createdAt              DateTime  @default(now())
    updatedAt              DateTime? @updatedAt
    accounts               Account[]
    sessions               Session[]
    posts                  Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model petOwner {
    ownerID                Int      @id @default(autoincrement())
    firstName              String
    surname                String
    image                  String?
    email                  String?
    mobile                 String?
    addressGreaterArea     String
    addressArea            String
    addressStreet          String
    addressStreetCode      String?
    addressStreetNumber    String
    addressFreeForm        String?
    status                 String
    startingDate           DateTime
    preferredCommunication String
    pets                   pet[]
    comments               String?
    createdAt              DateTime @default(now())
    updatedAt              DateTime @updatedAt
}

model pet {
    petID   Int     @id @default(autoincrement())
    petName String
    image   String?

    owner   petOwner @relation(fields: [ownerID], references: [ownerID])
    ownerID Int

    petTreatments petTreatment[]

    species                 String
    sex                     String
    age                     String
    breed                   String
    colour                  String?
    markings                String?
    status                  String
    sterilisedStatus        String
    sterilisedRequested     String?
    sterilisedRequestSigned String?
    sterilisationOutcome    String?
    vaccinationShot1        String
    vaccinationShot2        String?
    vaccinationShot3        String?
    treatments              String?
    clinicsAttended         petOnPetClinic[]
    lastDeworming           DateTime?
    membership              String
    cardStatus              String?
    kennelReceived          String[]
    comments                String?
    createdAt               DateTime         @default(now())
    updatedAt               DateTime         @updatedAt
}

model petClinic {
    clinicID    Int                    @id @default(autoincrement())
    pet         petOnPetClinic[]
    volunteer   volunteerOnPetClinic[]
    date        DateTime               @default(now())
    greaterArea String
    area        String
    conditions  String
    comments    String?
    createdAt   DateTime               @default(now())
    updatedAt   DateTime               @updatedAt
}

//For many to many relationship between pet and petClinic
model petOnPetClinic {
    petOnClinicID Int       @id @default(autoincrement())
    pet           pet       @relation(fields: [petID], references: [petID])
    petID         Int
    clinic        petClinic @relation(fields: [clinicID], references: [clinicID])
    clinicID      Int
}

//For many to many relationship between volunteer and petClinic
model volunteerOnPetClinic {
    volunteerOnClinicID Int       @id @default(autoincrement())
    volunteer           volunteer @relation(fields: [volunteerID], references: [volunteerID])
    volunteerID         Int
    clinic              petClinic @relation(fields: [clinicID], references: [clinicID])
    clinicID            Int
}

model petTreatment {
    treatmentID Int      @id @default(autoincrement())
    date        DateTime

    pet   pet @relation(fields: [petID], references: [petID])
    petID Int

    category  String
    type      String
    comments  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model volunteer {
    volunteerID            Int                    @id @default(autoincrement())
    firstName              String
    surname                String
    image                  String?
    email                  String?
    mobile                 String?
    addressGreaterArea     String
    addressStreet          String?
    addressStreetCode      String?
    addressStreetNumber    String?
    addressSuburb          String?
    addressPostalCode      String?
    addressFreeForm        String?
    preferredCommunication String
    status                 String
    clinicsAttended        volunteerOnPetClinic[]
    comments               String
    startingDate           DateTime
    createdAt              DateTime               @default(now())
    updatedAt              DateTime               @updatedAt
}
